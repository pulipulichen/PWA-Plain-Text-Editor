{"version":3,"sources":["webpack:///./src/components/ReplacePanel/GroupingTool/GroupingTool.less?90af","webpack:///./src/components/ReplacePanel/GroupingTool/GroupingTool.yaml","webpack:///./src/components/ReplacePanel/GroupingTool/GroupingTool.less?6c9b","webpack:///./src/components/ReplacePanel/GroupingTool/GroupingTool.less","webpack:///./src/components/ReplacePanel/GroupingTool/GroupingTool.yaml?3aad","webpack:///./src/components/ReplacePanel/GroupingTool/GroupingTool.html","webpack:///./src/components/ReplacePanel/GroupingTool/kmeans.js","webpack:///./src/components/ReplacePanel/GroupingTool/GroupingTool.js","webpack:///./src/components/ReplacePanel/GroupingTool/GroupingTool.js?9501","webpack:///./src/components/ReplacePanel/GroupingTool/GroupingTool.vue"],"names":["content","options","module","i","insert","singleton","locals","exports","Component","__i18n","push","_Ctor","render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","for","_v","_s","$t","directives","name","rawName","value","localConfig","GroupingTool","skipRows","expression","type","id","domProps","on","input","$event","target","composing","$set","skipColumns","groupType","change","$$selectedVal","Array","prototype","filter","call","o","selected","map","_value","multiple","groupLength","min","click","removeLastColumn","_withStripped","MAX_ITERATIONS","getRandomCentroidsNaiveSharding","dataset","k","numSamples","length","step","Math","floor","centroids","end","dataSet","start","features","n","mean","j","getRandomCentroids","max","centroidsIndex","index","random","indexOf","centroid","concat","shouldStop","oldCentroids","iterations","sameCount","compareCentroids","a","b","getDistanceSQ","diffs","reduce","r","e","recalculateCentroids","labels","newCentroidList","centroidGroup","newCentroid","points","pointList","totalPoints","means","point","val","kmeans","useNaiveSharding","arguments","undefined","c","indexes","closestCentroidIndex","prevDistance","distance","clusters","datasetLabels","_loop","forEach","datasetIndex","clusterVector","clusterIndex","converged","Error","_regeneratorRuntime","Op","Object","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","context","state","protoGenerator","Generator","generator","create","Context","method","arg","doneResult","delegate","delegateResult","maybeInvokeDelegate","methodName","TypeError","ContinueSentinel","record","tryCatch","info","done","resultName","next","nextLoc","sent","_sent","dispatchException","abrupt","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","_typeof","__await","then","unwrapped","error","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","_groupingBySimilarity","_groupingByDifference","_addKmeans","_kmeans2","_toVector","_test2","_test","props","data","$i18n","locale","watch","methods","test202210300033","_asyncToGenerator","_callee","vector","_context","t0","console","t1","log","apply","test202210301729","_callee2","_context2","toVector","_callee3","rows","columeLength","_context4","list","isColumnNumber","d","range","normalized","_d","vectors","v","_d2","_i","v2","_context3","_x","_callee4","cluster","_args5","_context5","_x2","addKmeans","_callee5","_args6","_context6","item","_x3","groupingByDifference","_callee6","member","headerRows","groups","groupIndexList","mod","minMembers","counter","group","clusterI","baseMember","randomId","output","_args7","_context7","Number","_yield$this$kmeans","balanceClusters","ceil","splice","groupId","_x4","maxMembers","sortClusterIndexBySize","tempCluster","largestCluster","maxCluster","isValid","len","minCluster","baseIndex","groupingBySimilarity","_callee7","_yield$this$kmeans2","isFinish","_randomId4","_args8","_context8","_x5","sort","$parent","dataMatrix","row","textContent","line","join","component","__file"],"mappings":"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","file":"vendors/GroupingTool.js","sourcesContent":["var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--1-2!../../../../node_modules/less-loader/dist/cjs.js??ref--1-3!./GroupingTool.less?vue&type=style&index=0&id=1d066bc0&lang=less&scoped=true&\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = function (Component) {\n  Component.options.__i18n = Component.options.__i18n || []\n  Component.options.__i18n.push('{\"en-US\":{\"Search\":\"Search\"},\"zh-TW\":{\"Search\":\"搜尋\"}}')\n  delete Component.options._Ctor\n}\n","import mod from \"-!../../../../node_modules/style-loader/dist/index.js!../../../../node_modules/css-loader/dist/cjs.js??ref--1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--1-2!../../../../node_modules/less-loader/dist/cjs.js??ref--1-3!./GroupingTool.less?vue&type=style&index=0&id=1d066bc0&lang=less&scoped=true&\"; export default mod; export * from \"-!../../../../node_modules/style-loader/dist/index.js!../../../../node_modules/css-loader/dist/cjs.js??ref--1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--1-2!../../../../node_modules/less-loader/dist/cjs.js??ref--1-3!./GroupingTool.less?vue&type=style&index=0&id=1d066bc0&lang=less&scoped=true&\"","exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(true);\n// Module\nexports.push([module.id, \"input[data-v-1d066bc0]{width:5rem!important}select[data-v-1d066bc0]{width:auto!important}label[data-v-1d066bc0]{width:4rem!important;text-align:right!important}button[data-v-1d066bc0],label[data-v-1d066bc0]{margin-right:1rem!important}\", \"\",{\"version\":3,\"sources\":[\"/app/src/components/ReplacePanel/GroupingTool/GroupingTool.less?vue&type=style&index=0&id=1d066bc0&lang=less&scoped=true&\",\"/app/src/components/ReplacePanel/GroupingTool/GroupingTool.less\"],\"names\":[],\"mappings\":\"AAAA,uBACE,oBCCF,CDMA,wBACE,oBCJF,CDQA,uBAEE,oBAAA,CACA,0BCNF,CDQA,+CAJE,2BCDF\",\"file\":\"GroupingTool.less?vue&type=style&index=0&id=1d066bc0&lang=less&scoped=true&\",\"sourcesContent\":[\"input {\\n  width: 5rem !important;\\n}\\n\\n// .GroupingTool {\\n//   margin-top: 0.2rem !important;\\n// }\\n\\nselect {\\n  width: auto !important;\\n}\\n\\n\\nlabel {\\n  margin-right: 1rem !important;\\n  width: 4rem !important;\\n  text-align: right !important;\\n}\\nbutton {\\n  margin-right: 1rem !important;\\n}\",\"input {\\n  width: 5rem !important;\\n}\\nselect {\\n  width: auto !important;\\n}\\nlabel {\\n  margin-right: 1rem !important;\\n  width: 4rem !important;\\n  text-align: right !important;\\n}\\nbutton {\\n  margin-right: 1rem !important;\\n}\\n\"]}]);\n","import mod from \"-!../../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./GroupingTool.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fapp%2Fsrc%2Fcomponents%2FReplacePanel%2FGroupingTool%2FGroupingTool.vue&lang=yaml\"; export default mod; export * from \"-!../../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./GroupingTool.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fapp%2Fsrc%2Fcomponents%2FReplacePanel%2FGroupingTool%2FGroupingTool.vue&lang=yaml\"","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"GroupingTool\" }, [\n    _c(\"div\", { staticClass: \"fields\" }, [\n      _c(\"label\", { attrs: { for: \"GroupingToolSkipRows\" } }, [\n        _vm._v(\"\\n      \" + _vm._s(_vm.$t(\"Skip Rows\")) + \"\\n    \")\n      ]),\n      _vm._v(\" \"),\n      _c(\"input\", {\n        directives: [\n          {\n            name: \"model\",\n            rawName: \"v-model\",\n            value: _vm.localConfig.GroupingTool.skipRows,\n            expression: \"localConfig.GroupingTool.skipRows\"\n          }\n        ],\n        attrs: { type: \"number\", id: \"GroupingToolSkipRows\" },\n        domProps: { value: _vm.localConfig.GroupingTool.skipRows },\n        on: {\n          input: function($event) {\n            if ($event.target.composing) {\n              return\n            }\n            _vm.$set(\n              _vm.localConfig.GroupingTool,\n              \"skipRows\",\n              $event.target.value\n            )\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\"label\", { attrs: { for: \"GroupingToolSkipColumns\" } }, [\n        _vm._v(\"\\n      \" + _vm._s(_vm.$t(\"Skip Cols\")) + \"\\n    \")\n      ]),\n      _vm._v(\" \"),\n      _c(\"input\", {\n        directives: [\n          {\n            name: \"model\",\n            rawName: \"v-model\",\n            value: _vm.localConfig.GroupingTool.skipColumns,\n            expression: \"localConfig.GroupingTool.skipColumns\"\n          }\n        ],\n        attrs: { type: \"number\", id: \"GroupingToolSkipColumns\" },\n        domProps: { value: _vm.localConfig.GroupingTool.skipColumns },\n        on: {\n          input: function($event) {\n            if ($event.target.composing) {\n              return\n            }\n            _vm.$set(\n              _vm.localConfig.GroupingTool,\n              \"skipColumns\",\n              $event.target.value\n            )\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"select\",\n        {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.localConfig.GroupingTool.groupType,\n              expression: \"localConfig.GroupingTool.groupType\"\n            }\n          ],\n          on: {\n            change: function($event) {\n              var $$selectedVal = Array.prototype.filter\n                .call($event.target.options, function(o) {\n                  return o.selected\n                })\n                .map(function(o) {\n                  var val = \"_value\" in o ? o._value : o.value\n                  return val\n                })\n              _vm.$set(\n                _vm.localConfig.GroupingTool,\n                \"groupType\",\n                $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n              )\n            }\n          }\n        },\n        [\n          _c(\"option\", { attrs: { value: \"group\" } }, [\n            _vm._v(_vm._s(_vm.$t(\"Group: \")))\n          ]),\n          _vm._v(\" \"),\n          _c(\"option\", { attrs: { value: \"member\" } }, [\n            _vm._v(_vm._s(_vm.$t(\"Member: \")))\n          ])\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"input\", {\n        directives: [\n          {\n            name: \"model\",\n            rawName: \"v-model\",\n            value: _vm.localConfig.GroupingTool.groupLength,\n            expression: \"localConfig.GroupingTool.groupLength\"\n          }\n        ],\n        attrs: { type: \"number\", min: \"0\" },\n        domProps: { value: _vm.localConfig.GroupingTool.groupLength },\n        on: {\n          input: function($event) {\n            if ($event.target.composing) {\n              return\n            }\n            _vm.$set(\n              _vm.localConfig.GroupingTool,\n              \"groupLength\",\n              $event.target.value\n            )\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"button\",\n        {\n          staticClass: \"ui icon button basic\",\n          attrs: { type: \"button\" },\n          on: { click: _vm.removeLastColumn }\n        },\n        [_c(\"i\", { staticClass: \"undo icon\" })]\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","const MAX_ITERATIONS = 50;\n\nfunction randomBetween(min, max) {\n  return Math.floor(\n    Math.random() * (max - min) + min\n  );\n}\n\nfunction calcMeanCentroid(dataSet, start, end) {\n  const features = dataSet[0].length;\n  const n = end - start;\n  let mean = [];\n  for (let i = 0; i < features; i++) {\n    mean.push(0);\n  }\n  for (let i = start; i < end; i++) {\n    for (let j = 0; j < features; j++) {\n      mean[j] = mean[j] + dataSet[i][j] / n;\n    }\n  }\n  return mean;\n}\n\nfunction getRandomCentroidsNaiveSharding(dataset, k) {\n  // implementation of a variation of naive sharding centroid initialization method\n  // (not using sums or sorting, just dividing into k shards and calc mean)\n  // https://www.kdnuggets.com/2017/03/naive-sharding-centroid-initialization-method.html\n  const numSamples = dataset.length;\n  // Divide dataset into k shards:\n  const step = Math.floor(numSamples / k);\n  // console.log(step);\n  const centroids = [];\n  for (let i = 0; i < k; i++) {\n    const start = step * i;\n    let end = step * (i + 1);\n    if (i + 1 === k) {\n      end = numSamples;\n    }\n    // console.log(start, end);\n    centroids.push(calcMeanCentroid(dataset, start, end));\n  }\n  return centroids;\n}\n\nfunction getRandomCentroids(dataset, k) {\n  // selects random points as centroids from the dataset\n  const numSamples = dataset.length;\n  const centroidsIndex = [];\n  let index;\n  while (centroidsIndex.length < k) {\n    index = randomBetween(0, numSamples);\n    if (centroidsIndex.indexOf(index) === -1) {\n      centroidsIndex.push(index);\n    }\n  }\n  const centroids = [];\n  for (let i = 0; i < centroidsIndex.length; i++) {\n    const centroid = [].concat(dataset[centroidsIndex[i]]);\n    centroids.push(centroid);\n  }\n  return centroids;\n}\n\nfunction compareCentroids(a, b) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction shouldStop(oldCentroids, centroids, iterations) {\n  if (iterations > MAX_ITERATIONS) {\n    return true;\n  }\n  if (!oldCentroids || !oldCentroids.length) {\n    return false;\n  }\n  let sameCount = true;\n  for (let i = 0; i < centroids.length; i++) {\n    if (!compareCentroids(centroids[i], oldCentroids[i])) {\n      sameCount = false;\n    }\n  }\n  return sameCount;\n}\n\n// Calculate Squared Euclidean Distance\nfunction getDistanceSQ(a, b) {\n  const diffs = [];\n  for (let i = 0; i < a.length; i++) {\n    diffs.push(a[i] - b[i]);\n  }\n  return diffs.reduce((r, e) => (r + (e * e)), 0);\n}\n\n// Returns a label for each piece of data in the dataset. \nfunction getLabels(dataSet, centroids) {\n  // prep data structure:\n  const labels = {};\n  for (let c = 0; c < centroids.length; c++) {\n    labels[c] = {\n      points: [],\n      centroid: centroids[c],\n      indexes: []\n    };\n  }\n  // For each element in the dataset, choose the closest centroid. \n  // Make that centroid the element's label.\n  for (let i = 0; i < dataSet.length; i++) {\n    const a = dataSet[i];\n    let closestCentroid, closestCentroidIndex, prevDistance;\n    for (let j = 0; j < centroids.length; j++) {\n      let centroid = centroids[j];\n      if (j === 0) {\n        closestCentroid = centroid;\n        closestCentroidIndex = j;\n        prevDistance = getDistanceSQ(a, closestCentroid);\n      } else {\n        // get distance:\n        const distance = getDistanceSQ(a, centroid);\n        if (distance < prevDistance) {\n          prevDistance = distance;\n          closestCentroid = centroid;\n          closestCentroidIndex = j;\n        }\n      }\n    }\n    // add point to centroid labels:\n    labels[closestCentroidIndex].points.push(a);\n    labels[closestCentroidIndex].indexes.push(i);\n  }\n  return labels;\n}\n\nfunction getPointsMean(pointList) {\n  const totalPoints = pointList.length;\n  const means = [];\n  for (let j = 0; j < pointList[0].length; j++) {\n    means.push(0);\n  }\n  for (let i = 0; i < pointList.length; i++) {\n    const point = pointList[i];\n    for (let j = 0; j < point.length; j++) {\n      const val = point[j];\n      means[j] = means[j] + val / totalPoints;\n    }\n  }\n  return means;\n}\n\nfunction recalculateCentroids(dataSet, labels, k) {\n  // Each centroid is the geometric mean of the points that\n  // have that centroid's label. Important: If a centroid is empty (no points have\n  // that centroid's label) you should randomly re-initialize it.\n  let newCentroid;\n  const newCentroidList = [];\n  for (const k in labels) {\n    const centroidGroup = labels[k];\n    if (centroidGroup.points.length > 0) {\n      // find mean:\n      newCentroid = getPointsMean(centroidGroup.points);\n    } else {\n      // get new random centroid\n      newCentroid = getRandomCentroids(dataSet, 1)[0];\n    }\n    newCentroidList.push(newCentroid);\n  }\n  return newCentroidList;\n}\n\nfunction kmeans(dataset, k, useNaiveSharding = 'auto') {\n  if (useNaiveSharding === 'auto') {\n    useNaiveSharding = (dataset.length / k > 4)\n  }\n  useNaiveSharding = false\n    //   console.log(dataset)\n  if (dataset.length && dataset[0].length && dataset.length > k) {\n    // Initialize book keeping variables\n    let iterations = 0;\n    let oldCentroids, labels, centroids;\n\n    // Initialize centroids randomly\n    if (useNaiveSharding) {\n      centroids = getRandomCentroidsNaiveSharding(dataset, k);\n    } else {\n      centroids = getRandomCentroids(dataset, k);\n    }\n    // console.log(centroids)\n\n    // Run the main k-means algorithm\n    while (!shouldStop(oldCentroids, centroids, iterations)) {\n      // Save old centroids for convergence test.\n      oldCentroids = [].concat(centroids);\n      iterations++;\n\n      // Assign labels to each datapoint based on centroids\n      labels = getLabels(dataset, centroids);\n      // console.log(oldCentroids)\n      centroids = recalculateCentroids(dataset, labels, k);\n      // console.log(centroids)\n    }\n\n    const clusters = [];\n    let datasetLabels = new Array(dataset.length)\n    for (let i = 0; i < k; i++) {\n      clusters.push(labels[i].indexes);\n      labels[i].indexes.forEach(datasetIndex => {\n        datasetLabels[datasetIndex] = i\n      })\n    }\n    \n    const results = {\n      datasetLabels,\n      clusterVector: datasetLabels,\n      clusters: clusters,\n      clusterIndex: clusters,\n      centroids: centroids,\n      iterations: iterations,\n      converged: iterations <= MAX_ITERATIONS,\n    };\n    return results;\n  } else {\n    throw new Error('Invalid dataset');\n  }\n}\n\nexport default kmeans;","import kmeans from './kmeans.js'\r\n\r\nlet GroupingTool = {\r\n  props: ['config', 'localConfig', 'utils'],\r\n  data () {    \r\n    this.$i18n.locale = this.localConfig.locale\r\n    return {\r\n    }\r\n  },\r\n  watch: {\r\n    'localConfig.locale'() {\r\n      this.$i18n.locale = this.localConfig.locale;\r\n    },\r\n  },\r\n  // computed: {\r\n    \r\n  // },\r\n  // mounted: async function () {\r\n  //   this.test202210301729()\r\n  // },\r\n  methods: {\r\n    test202210300033: async function () {\r\n\r\n      // var vector = [\r\n      //   [1, 10, 2, 30],\r\n      //   ['A', 30, 20, 2],\r\n      //   ['B', 30, 30, 3],\r\n      //   ['C', 30, 31, 3],\r\n      //   ['A', 10, 10, 1],\r\n      //   ['B', 20, 1, 30],\r\n      //   ['C', 1, 25, 30]\r\n      // ]\r\n\r\n      var vector = [\r\n        [10, 2, 30],\r\n        [30, 20, 2],\r\n        [30, 30, 3],\r\n        [30, 31, 3],\r\n        [10, 10, 1],\r\n        [20, 1, 30],\r\n        [1, 25, 30]\r\n      ]\r\n\r\n\r\n      // console.log(await this.toVector(vector))\r\n      // console.log(await this.addKmeans(vector))\r\n      // console.log(await this.addGroupInDifference(vector))\r\n      // console.log(await this.addGroupInSimilarity(vector))\r\n      // console.log(vector)\r\n      console.log(await this.kmeans(vector, 3))\r\n    },\r\n    test202210301729: async function () {\r\n\r\n      var vector = [\r\n        [1, 2, 3, 1],\r\n        [5,2,3,1],\r\n        [1,2,4,0],\r\n        [5,3,4,0]\r\n      ]\r\n\r\n\r\n      // console.log(await this.toVector(vector))\r\n      // console.log(await this.addKmeans(vector))\r\n      // console.log(vector)\r\n      // console.log(await this.kmeans(vector, 2))\r\n      // console.log(await this.groupingBySimilarity(vector, 'member', 2))\r\n      // console.log(await this.groupingByDifference(vector, 'member', 2))\r\n    },\r\n    toVector: async function(data) {\r\n      // console.log(data)\r\n\r\n\r\n      let rows = new Array(data.length)\r\n      let columeLength = data[0].length\r\n\r\n      for (let c = this.localConfig.GroupingTool.skipColumns; c < columeLength; c++) {\r\n        let list = []\r\n        let isColumnNumber = true\r\n\r\n        for (let d = 0; d < data.length; d++) {\r\n          let value = data[d][c]\r\n          let isNumber = (typeof(value) === 'number')\r\n          if (isNumber === false) {\r\n            isColumnNumber = false\r\n            break\r\n          }\r\n          else {\r\n            list.push(value)\r\n          }\r\n        }\r\n\r\n        // console.log(isColumnNumber)\r\n\r\n        if (isColumnNumber === true) {\r\n          let max = Math.max(...list)\r\n          let min = Math.min(...list)\r\n          let range = max - min\r\n          if (range === 0) {\r\n            continue\r\n          }\r\n\r\n          let normalized\r\n          if (max === 1 && min === 0) {\r\n            normalized = list\r\n          }\r\n          else {\r\n            normalized = list.map(value => ((value - min) / range))\r\n          }\r\n\r\n          for (let r = 0; r < rows.length; r++) {\r\n            if (!rows[r]) {\r\n              rows[r] = []\r\n            }\r\n\r\n            rows[r].push(normalized[r])\r\n          }\r\n        }\r\n        else {\r\n          let map = {}\r\n          \r\n          let id = 0\r\n          for (let d = 0; d < data.length; d++) {\r\n            let value = data[d][c]\r\n            value = value + ''\r\n            // console.log(value)\r\n            if (!map[value]) {\r\n              map[value] = id\r\n              id++\r\n            }\r\n            list.push(value)\r\n          }\r\n\r\n          // console.log(map, list)\r\n\r\n          let vectors = []\r\n          let v = []\r\n          let keys = Object.keys(map)\r\n          for (let i = 0; i < keys.length; i++) {\r\n            v[i] = 0\r\n          }\r\n          // console.log(v)\r\n\r\n          for (let d = 0; d < data.length; d++) {\r\n            let value = data[d][c]\r\n            value = value + ''\r\n            let i = keys.indexOf(value)\r\n            // console.log(i)\r\n            let v2 = [].concat(v)\r\n            v2[i] = 1\r\n            vectors.push(v2)\r\n          }\r\n          // console.log(vectors)\r\n\r\n          vectors.forEach((vector, r) => {\r\n            if (!rows[r]) {\r\n              rows[r] = []\r\n            }\r\n            rows[r] = rows[r].concat(vector)\r\n          })\r\n        }\r\n      }\r\n\r\n      // console.log(rows)\r\n\r\n      return rows\r\n    },\r\n    // kmeans: async function (data, cluster = 3) {\r\n    //   let vector = await this.toVector(data)\r\n    //   return new Promise(function (resolve, reject) {\r\n    //     // console.log(cluster)\r\n    //     kmeans(vector, cluster, function(err, clusterVector, clusterIndex, cluster, centroids) {\r\n    //       if (err) {\r\n    //         // throw new Error(err)\r\n    //         return reject(err)\r\n    //       }\r\n      \r\n    //       //do something with the result\r\n    //       // console.log(res)\r\n    //       resolve({\r\n    //         clusterVector,\r\n    //         clusterIndex,\r\n    //         cluster,\r\n    //         centroids\r\n    //       })\r\n    //     })\r\n    //   })\r\n    //   // console.log(vector) \r\n    // },\r\n    kmeans: async function (data, cluster = 3) {\r\n      let vector = await this.toVector(data)\r\n      // return new Promise(function (resolve, reject) {\r\n        // console.log(cluster)\r\n        // resovle(kmeans(vector, cluster))\r\n      // })\r\n      // console.log(vector) \r\n      let result = kmeans(vector, cluster)\r\n      // console.log(result)\r\n      return result\r\n    },\r\n    addKmeans: async function (vector, cluster = 3) {\r\n      let result = await this.kmeans(vector, cluster)\r\n\r\n      return vector.map((item, i) => {\r\n        // console.log(item, i, result.clusterIndex)\r\n        item.push(result.clusterVector[i])\r\n        return item\r\n      })\r\n    },\r\n    groupingByDifference: async function (vector, groupType = 'member', member = 3) {\r\n      member = Number(member)\r\n\r\n      let headerRows = []\r\n      if (this.localConfig.GroupingTool.skipRows > 0) {\r\n        headerRows = vector.slice(0, this.localConfig.GroupingTool.skipRows)\r\n        vector = vector.slice(this.localConfig.GroupingTool.skipRows)\r\n      }\r\n      \r\n      let {clusterIndex} = await this.kmeans(vector, member)\r\n\r\n      // 合併與計算比例\r\n      clusterIndex = this.balanceClusters(clusterIndex, Math.ceil(vector.length / member), Math.floor(vector.length / member))\r\n\r\n      // console.log(clusterIndex)\r\n      // return false\r\n\r\n      let groups = Math.ceil(vector.length / member)\r\n      \r\n      if (groupType === 'group') {\r\n        groups = member\r\n        member = Number(Math.floor(vector.length / groups))\r\n      }\r\n      // console.log(groups, member)\r\n      \r\n      let groupIndexList = []\r\n      let mod = vector.length % groups\r\n      let minMembers = Math.floor(vector.length / groups)\r\n      // return console.log(member, Math.floor(vector.length / groups))\r\n      // let minMembers = member\r\n\r\n      let counter = 0\r\n      // console.log(groups)\r\n      for (let i = 0; i < groups; i++) {\r\n        let group = []\r\n\r\n        let clusterI = 0\r\n        let baseMember = minMembers\r\n        if (i < mod) {\r\n          baseMember++\r\n        }\r\n\r\n        // console.log(baseMember)\r\n        // continue\r\n\r\n        while (true) {\r\n          let v = clusterIndex[(clusterI % clusterIndex.length)]\r\n          \r\n          // console.log(groups, clusterI, v, counter, vector.length) \r\n          if (v.length === 0) {\r\n            clusterI++\r\n            continue\r\n          }\r\n\r\n          let randomId = Math.floor(Math.random() * v.length)\r\n          let item = v[randomId]\r\n          group.push(Number(item))\r\n          // console.log(item)\r\n          \r\n          v.splice(randomId, 1)\r\n          // console.log(vector)\r\n          // clusterVector[(clusterI % member)] = v\r\n          // console.log(result.clusterVector)\r\n          // console.log(v)\r\n\r\n          clusterI++\r\n          counter++\r\n          // console.log(counter, group.length, member)\r\n          if (counter === vector.length) {\r\n            break\r\n          }\r\n\r\n          if (group.length === baseMember) {\r\n            break\r\n          }\r\n        }\r\n        // console.log(group)\r\n        groupIndexList.push(group)\r\n      }\r\n\r\n      // console.log(groupIndexList)\r\n\r\n      // let invertGroup = new Array(groups)\r\n      let output = [].concat(vector)\r\n      groupIndexList.forEach((list, groupId) => {\r\n        list.forEach(index => {\r\n          let o = [].concat(output[index])\r\n          o.push(groupId)\r\n          output[index] = o\r\n        })\r\n      })\r\n\r\n      output = headerRows.concat(output)\r\n\r\n      return output\r\n    },\r\n    balanceClusters (clusterIndex, maxMembers, minMembers) {\r\n      \r\n      // if (maxMembers === minMembers) {\r\n      //   minMembers--\r\n      // }\r\n      // return false\r\n      this.sortClusterIndexBySize(clusterIndex)\r\n      // console.log(JSON.stringify(clusterIndex, null, 2), maxMembers, minMembers)\r\n\r\n      while (clusterIndex[clusterIndex.length - 1].length === 0) {\r\n        let tempCluster = []\r\n        let largestCluster = clusterIndex[0]\r\n        while (tempCluster.length < minMembers) {\r\n          let randomId = Math.floor(Math.random() * largestCluster.length)\r\n          tempCluster.push(largestCluster[randomId])\r\n          largestCluster.splice(randomId, 1)\r\n          // console.log(tempCluster)\r\n        }\r\n        clusterIndex[0] = largestCluster\r\n        clusterIndex[(clusterIndex.length - 1)] = tempCluster\r\n\r\n        this.sortClusterIndexBySize(clusterIndex)\r\n      }\r\n\r\n      // console.log(clusterIndex)\r\n      let isValid = true\r\n      for (let i = 0; i < clusterIndex.length; i++) {\r\n        if (clusterIndex[i].length > maxMembers) {\r\n          isValid = 1\r\n          break\r\n        }\r\n        if (clusterIndex[i].length < minMembers) {\r\n          isValid = 2\r\n          break\r\n        }\r\n      }\r\n\r\n      \r\n      if (isValid === true) {\r\n        return clusterIndex\r\n      }\r\n      else if (isValid === 1) {\r\n        // 最小的，合併\r\n        let len = clusterIndex.length\r\n        let minCluster = clusterIndex[(len - 1)]\r\n        let baseIndex = (len - 2)\r\n        while (clusterIndex[baseIndex].length < maxMembers) {\r\n          let randomId = Math.floor(Math.random() * minCluster.length)\r\n          clusterIndex[baseIndex].push(minCluster[randomId])\r\n          minCluster.splice(randomId, 1)\r\n          // console.log(tempCluster)\r\n\r\n          if (minCluster.length === 0) {\r\n            break\r\n          }\r\n          if (clusterIndex[baseIndex].length === maxMembers && \r\n              minCluster.length > 0) {\r\n            baseIndex--\r\n          }\r\n\r\n          if (baseIndex === -1) {\r\n            break\r\n          }\r\n        }\r\n        \r\n        // clusterIndex[(len - 2)] = clusterIndex[(len - 2)].concat(clusterIndex[(len - 1)])\r\n\r\n        // 最大的，拆一半\r\n        let tempCluster = [].concat(minCluster)\r\n        let largestCluster = clusterIndex[0]\r\n        while (tempCluster.length < minMembers) {\r\n          let randomId = Math.floor(Math.random() * largestCluster.length)\r\n          tempCluster.push(largestCluster[randomId])\r\n          largestCluster.splice(randomId, 1)\r\n          // console.log(tempCluster)\r\n        }\r\n        clusterIndex[0] = largestCluster\r\n        clusterIndex[(len - 1)] = tempCluster\r\n\r\n        // console.log(clusterIndex)\r\n        // return false\r\n        return this.balanceClusters(clusterIndex, maxMembers, minMembers)\r\n      }\r\n      else {\r\n        // 最小的，合併\r\n        let len = clusterIndex.length\r\n        let maxCluster = clusterIndex[0]\r\n        let randomId = Math.floor(Math.random() * maxCluster.length)\r\n        clusterIndex[(len - 1)].push(maxCluster[randomId])\r\n        maxCluster.splice(randomId, 1)\r\n        clusterIndex[0] = maxCluster\r\n        // let baseIndex = (len - 2)\r\n        // while (clusterIndex[baseIndex].length < maxMembers) {\r\n        //   let randomId = Math.floor(Math.random() * minCluster.length)\r\n        //   clusterIndex[baseIndex].push(minCluster[randomId])\r\n        //   minCluster.splice(randomId, 1)\r\n        //   // console.log(tempCluster)\r\n\r\n        //   if (minCluster.length === 0) {\r\n        //     break\r\n        //   }\r\n        //   if (clusterIndex[baseIndex].length === maxMembers && \r\n        //       minCluster.length > 0) {\r\n        //     baseIndex--\r\n        //   }\r\n        // }\r\n        \r\n        // // clusterIndex[(len - 2)] = clusterIndex[(len - 2)].concat(clusterIndex[(len - 1)])\r\n\r\n        // // 最大的，拆一半\r\n        // let tempCluster = []\r\n        // let largestCluster = clusterIndex[0]\r\n        // while (tempCluster.length < minMembers) {\r\n        //   let randomId = Math.floor(Math.random() * largestCluster.length)\r\n        //   tempCluster.push(largestCluster[randomId])\r\n        //   largestCluster.splice(randomId, 1)\r\n        //   // console.log(tempCluster)\r\n        // }\r\n        // clusterIndex[0] = largestCluster\r\n        // clusterIndex[(len - 1)] = tempCluster\r\n\r\n        // // console.log(clusterIndex)\r\n        // return false\r\n        return this.balanceClusters(clusterIndex, maxMembers, minMembers)\r\n      }\r\n    },\r\n    groupingBySimilarity: async function (vector, groupType = 'member', member = 3) {\r\n      member = Number(member)\r\n\r\n      let headerRows = []\r\n      if (this.localConfig.GroupingTool.skipRows > 0) {\r\n        headerRows = vector.slice(0, this.localConfig.GroupingTool.skipRows)\r\n        vector = vector.slice(this.localConfig.GroupingTool.skipRows)\r\n      }\r\n\r\n      let groups = Math.ceil(vector.length / member)\r\n\r\n      if (groupType === 'group') {\r\n        groups = member\r\n        member = Math.ceil(vector.length / groups)\r\n      }\r\n\r\n      // console.log(groups, member)\r\n\r\n      let {clusterIndex} = await this.kmeans(vector, groups)\r\n      // console.log(clusterIndex) \r\n      this.sortClusterIndexBySize(clusterIndex)\r\n      while (true) {\r\n        let isFinish = true\r\n        \r\n        for (let i = 0; i < clusterIndex.length; i++) {\r\n          let list = clusterIndex[i]\r\n          if (list.length <= member && list.length >= member - 1) {\r\n            continue\r\n          }\r\n\r\n          isFinish = false\r\n\r\n          if (list.length > member) {\r\n            let randomId = Math.floor(Math.random() * list.length)\r\n            clusterIndex[(clusterIndex.length - 1)].push(list[randomId])\r\n            list.splice(randomId, 1)\r\n          }\r\n          else {\r\n            let randomId = Math.floor(Math.random() * clusterIndex[0].length)\r\n            clusterIndex[i].push(clusterIndex[0][randomId])\r\n            clusterIndex[0].splice(randomId, 1)\r\n          }\r\n            \r\n\r\n          this.sortClusterIndexBySize(clusterIndex)\r\n          break\r\n        }\r\n\r\n\r\n        if (isFinish) {\r\n          break\r\n        }\r\n        \r\n      }\r\n\r\n      Object.keys(clusterIndex).forEach(groupId => {\r\n        clusterIndex[groupId].forEach(i => {\r\n          vector[i].push(Number(groupId))\r\n        })\r\n      })\r\n\r\n      vector = headerRows.concat(vector)\r\n\r\n      return vector\r\n    },\r\n    sortClusterIndexBySize (clusterIndex) {\r\n      clusterIndex.sort((a, b) => {\r\n        return b.length - a.length\r\n      })\r\n    },\r\n    removeLastColumn () {\r\n      let data = this.$parent.dataMatrix\r\n      let headerRows = []\r\n      if (this.localConfig.GroupingTool.skipRows > 0) {\r\n        headerRows = data.slice(0, this.localConfig.GroupingTool.skipRows)\r\n        data = data.slice(this.localConfig.GroupingTool.skipRows)\r\n      }\r\n      // console.log(data)\r\n      data = data.map(row => row.slice(0, row.length - 1))\r\n      data = headerRows.concat(data)\r\n      // console.log(data)\r\n      this.localConfig.textContent = data.map(line => line.join('\\t')).join('\\n')\r\n    }\r\n  }\r\n}\r\n\r\nexport default GroupingTool","import mod from \"-!../../../../node_modules/babel-loader/lib/index.js??ref--6!./GroupingTool.js?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/babel-loader/lib/index.js??ref--6!./GroupingTool.js?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GroupingTool.html?vue&type=template&id=1d066bc0&scoped=true&\"\nimport script from \"./GroupingTool.js?vue&type=script&lang=js&\"\nexport * from \"./GroupingTool.js?vue&type=script&lang=js&\"\nimport style0 from \"./GroupingTool.less?vue&type=style&index=0&id=1d066bc0&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1d066bc0\",\n  null\n  \n)\n\n/* custom blocks */\nimport block0 from \"./GroupingTool.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fapp%2Fsrc%2Fcomponents%2FReplacePanel%2FGroupingTool%2FGroupingTool.vue&lang=yaml\"\nif (typeof block0 === 'function') block0(component)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/app/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('1d066bc0')) {\n      api.createRecord('1d066bc0', component.options)\n    } else {\n      api.reload('1d066bc0', component.options)\n    }\n    module.hot.accept(\"./GroupingTool.html?vue&type=template&id=1d066bc0&scoped=true&\", function () {\n      api.rerender('1d066bc0', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/components/ReplacePanel/GroupingTool/GroupingTool.vue\"\nexport default component.exports"],"sourceRoot":""}